input { 
  file {
    path => [ "/home/alogo/Documents/logs/lobcder.production/*.log" ]
    #path => [ "/path/log" ]
    #path => ["/mnt/6VPKCXKJ/lobcder/logs.miss/*.*"]
      codec => multiline {
      patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
      pattern => "%{MONTH} %{MONTHDAY}, %{YEAR} %{MY_12_TIME}"
      negate => true
      what => previous
    }
    start_position => "beginning"
    sincedb_path => "/dev/null"	
  }
}



  #--------------Timestamp-----------------
filter {

  grok {
    patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
    match => [ "message", "(?<logdate>%{MONTH} %{MONTHDAY}, %{YEAR} %{MY_12_TIME}) %{NOTSPACE:thread} %{NOTSPACE:method}\n%{LOGLEVEL:loglevel}: %{ALLDATA:logmessage}" ]
  }
 
  date {
    match => [ "logdate", "MMM dd, YYYY h:mm:ss a" ]
  }
}


 # Receive Transmit and Replicate
filter { 
#---------------------------------Upload TO lobcder -----------------------------  
    #Source: 149.156.10.132 Destination: vphlob Rx_Speed: 11117.299035369775 Kbites/sec Rx_Size: 864370 bytes
    #Source: 149.156.10.132 Destination: file://vphlob Rx_Speed: 59.172413793103445 Kbites/sec Rx_Size: 429 bytes
    grok {
        patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
        match => [ "logmessage", "Source: %{IPORHOST_PATH_URI:rx_source} Destination: %{IPORHOST_PATH_URI:rx_destination} Rx(\s|_)Speed: %{BASE16FLOAT:rx_speed} Kbites/sec Rx(\s|_)Size: %{NUMBER:rx_size} bytes" ]
        # add_field => [ "", "rx_source" ]
        # add_field => [ "", "rx_destination" ]
        # add_field => [ "", "rx_speed" ]
        # add_field => [ "", "rx_size" ]
     }


    mutate {
        convert => [ "rx_size", "integer" ]
        convert => [ "rx_speed", "float" ]
        gsub => [
                "rx_source", "[A-Za-z]+(\+[A-Za-z+]+)?://", ""
                ]
    }

    #ruby {
    #    code => "sum = 1 + 1"
    #    add_field => [ "my_Field", "sum" ]
    #} 

    geoip {
      source => "rx_source"
      target => "rx_sourceLoc"
      database => "/home/alogo/workspace/lobcder/lobcder-tests/etc/GeoLiteCity.dat"
    } 


    
}


 filter { 
 #---------------------------------Download FROM lobcder -----------------------------  
 # Source: 149.156.10.131 Destination: 149.156.10.132 Tx Speed: 820.4387096774194 Kbites/sec Tx_Size: 635840 bytes
 # Source: 149.156.10.131 Destination: 46.105.98.182 Tx_Speed: 1318.6917933130699 Kbites/sec Tx_Size: 271156 bytes
    grok {
        patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
        match => [ "logmessage", "Source: %{IPORHOST_PATH_URI:tx_source} Destination: %{IPORHOST_PATH_URI:tx_destination} Tx(\s|_)Speed: %{BASE16FLOAT:tx_speed} Kbites/sec Tx(\s|_)Size: %{NUMBER:tx_size} bytes" ]
        add_field => [ "", "tx_source" ]
        add_field => [ "", "tx_destination" ]
        add_field => [ "", "tx_speed" ]
        add_field => [ "", "tx_size" ]
    }

    mutate {
      convert => [ "tx_size", "integer" ]
      convert => [ "tx_speed", "float" ]
    }
    
    mutate {
      gsub => [
        "tx_destination", "[A-Za-z]+(\+[A-Za-z+]+)?://", ""
      ]
    }
    
  geoip {
    source => "tx_source"
    target => "tx_sourceLoc"
    database => "/home/alogo/workspace/lobcder/lobcder-tests/etc/GeoLiteCity.dat"
  } 

    geoip {
      source => "tx_destination"
      target => "tx_destinationLoc"
      database => "/home/alogo/workspace/lobcder/lobcder-tests/etc/GeoLiteCity.dat"
   }
 }

 filter { 
 #Source: vphlob Destination: 149.156.10.131 Replication_Speed: 2.7925142392188773 Kbites/sec Repl_Size: 429 bytes
  grok {
    patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
    match => [ "logmessage", "Source: %{IPORHOST_PATH_URI:repl_source} Destination: %{IPORHOST_PATH_URI:repl_destination} Replication(\s|_)Speed: %{BASE16FLOAT:repl_speed} Kbites/sec Repl(\s|_)Size: %{NUMBER:repl_size} bytes" ]
    # add_field => [ "", "repl_source" ]
    # add_field => [ "", "repl_destination" ]
    # add_field => [ "", "repl_speed" ]
    # add_field => [ "", "repl_size" ]
  }
  
  mutate {
    convert => [ "repl_size", "integer" ]
    convert => [ "repl_speed", "float" ]
  }
    
    mutate {
      gsub => [
        "repl_destination", "[A-Za-z]+(\+[A-Za-z+]+)?://", "",
        "repl_source", "[A-Za-z]+(\+[A-Za-z+]+)?://", ""
      ]
    }
    
    geoip {
      source => "repl_source"
      target => "repl_source_location"
      database => "/home/alogo/workspace/lobcder/lobcder-tests/etc/GeoLiteCity.dat"
    } 

   geoip {
     source => "repl_destination"
     target => "repl_destinationLoc"
     database => "/home/alogo/workspace/lobcder/lobcder-tests/etc/GeoLiteCity.dat"
   }
  
}

 
 filter { 
 #Req_Source: 84.84.24.115 Method: PROPFIND Content_Len: 159 Content_Type: application/xml Elapsed_Time: 0.007 sec EncodedUser: c2tvdWxvdXo6dG9rZW4w UserAgent: davfs2/1.4.6 neon/0.29.6
  if [thread] == "nl.uva.cs.lobcder.frontend.BasicAuthFilter" {
    grok {
        patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
        match => [ "logmessage", "Req_Source: %{IPORHOST_PATH_URI:req_source} Method: %{WEBDAV_VERB:req_verb} Content_Len: %{INT:req_contLen} Content_Type: %{NOTSPACE:req_contType} Elapsed_Time: %{BASE16FLOAT:req_elapsed} sec EncodedUser: %{NOTSPACE:req_user} UserAgent: %{ALLDATA:req_userAgent} queryString: %{NOTSPACE:req_queryString} reqURL: %{URI:req_URL}" ]
    } 
 }else{
      grok {
        patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
        match => [ "logmessage", "Req_Source: %{IPORHOST_PATH_URI:req_source} Method: %{WEBDAV_VERB:req_verb} Content_Len: %{INT:req_contLen} Content_Type: %{NOTSPACE:req_contType} Elapsed_Time: %{BASE16FLOAT:req_elapsed} sec EncodedUser: %{NOTSPACE:req_user} UserAgent: %{ALLDATA:req_userAgent}" ]
    } 
 }
        
    mutate {
        convert => [ "req_contLen", "integer" ]
        convert => [ "req_elapsed", "float" ]
    }

    geoip {
	source => "req_source"
	target => "req_sourceLoc"
	database => "/home/alogo/workspace/lobcder/lobcder-tests/etc/GeoLiteCity.dat"
    }
      
    useragent {
        source => "req_userAgent"
    }
    
    mutate {
      replace => [ "password", "SECRET" ]
    }
}

 filter{
 
 
  #kv { 
  #  include_keys = [ "getRolesStr", "From", "user", "password", "User", "Method", "getUserId" ]
  #}
 
    grok {
        patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
        match => [ "logmessage", "getRolesStr: %{GREEDYDATA:auth_roles}" ]
        # add_field => [ "", "auth_roles" ]
    }

    grok {
        patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
        match => [ "logmessage", "From: %{NOTSPACE:auth_from} user: %{NOTSPACE:auth_user} password: %{NOTSPACE:password}" ]
    }
    
    grok {
       patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
       match => [ "logmessage", "From: %{NOTSPACE:auth_from} User: %{NOTSPACE:auth_user} Method: %{WEBDAV_VERB:auth_verb}" ]
    }

    
   grok {
       patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
       match => [ "logmessage", "getUserId: %{NOTSPACE:auth_user}" ]
   }
    
   grok {
       patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
       match => [ "logmessage", "createCollection %{NOTSPACE:new_collection} in %{NOTSPACE:parent_collection}" ]
  }
   
  grok {
      patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
      match => [ "logmessage", "getResource:  strPath: %{PATH:strPath} path: %{PATH:path} (.*)" ]
   }
   
  grok {
    patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
    match => [ "logmessage", "%{LOCAL_DB_TOKEN:password}" ]
    #add_field => [ "", "token" ]
  }
  
  
  grok {
    patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
    match => [ "logmessage", "%{LOCAL_DB_UNAME_REF:userNameRef}" ]
    #add_field => [ "", "userNameRef" ]
  }
    
  mutate {
    convert => [ "userNameRef", "integer" ]
  }
  
  mutate {
    replace => [ "password", "SECRET" ]
  }
 }
 
 
  filter{
  
      grok {
        patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
        match => [ "logmessage", "Server startup in %{INT:apache_startupTime} ms" ]
      }
    
    grok {
        patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
        match => [ "logmessage", "Starting Coyote HTTP/1.1 on http-%{INT:apache_port}" ]
    }
    
    grok {
        patterns_dir => "/home/alogo/workspace/lobcder/lobcder-tests/etc/patterns"
        match => [ "logmessage", "Apache Tomcat/%{TOMCAT_VERSION:apache_version}" ]
    }
    
    mutate {
        convert => [ "apache_startupTime", "integer" ]
        convert => [ "apache_port", "integer" ]
    }
  }

output { 
    #stdout {  } 
#file{
#path => "/path/logstash.out"
#}
csv {
    fields => ["logdate","thread","method","loglevel"]
    path => "/path/logstash_loglevel.csv"
}


if [tx_speed] =~ /.+/ {
csv {
   fields => ["logdate","tx_source","tx_destination","tx_speed","tx_size"]
   path => "/path/logstash_tx.csv"
}
}


if [rx_speed] =~ /.+/ {
csv {
   fields => ["logdate","rx_source","rx_destination","rx_speed","rx_size"]
   path => "/path/logstash_rx.csv"
}
}


if [repl_speed] =~ /.+/ {
csv {
   fields => ["logdate","repl_source","repl_destination","repl_speed","repl_size"]
   path => "/path/logstash_repl.csv"
}
}

if [req_elapsed] =~ /.+/ {
 csv {
    fields => ["logdate","req_verb" ,"req_contLen" , "req_contType" ,"req_elapsed","req_userAgent","req_queryString","req_URL"]
    path => "/path/logstash_req.csv"
 }
}


# csv {
#    fields => ["logdate","thread","method","loglevel","logmessage","tx_source","tx_destination","tx_speed","tx_size","rx_source","rx_destination","rx_speed","rx_size","repl_source","repl_destination","repl_speed","repl_size","req_verb" ,"req_contLen" , "req_contType" ,"req_elapsed","req_userAgent","req_queryString","req_URL"]
#    path => "/path/logstash_loglevel.csv"
# }


}