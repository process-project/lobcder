---------------------------------Plot folder profile -----------------------------

SELECT requestURL,
COUNT(IF(methodName = 'PUT',1,NULL) OR IF(methodName = 'POST',1,NULL) OR IF(methodName = 'DELETE',1,NULL))  'Data Write',
       COUNT(IF(methodName = 'GET',1,NULL)) 'Data Read',
       COUNT(IF(methodName = 'PROPFIND',1,NULL) OR IF(methodName = 'OPTIONS',1,NULL) OR IF(methodName = 'HEAD',1,NULL)) 'Metadata Read', 
       COUNT(IF(methodName = 'PROPPATCH',1,NULL) OR IF(methodName = 'COPY',1,NULL) OR IF(methodName = 'MOVE',1,NULL) OR IF(methodName = 'LOCK',1,NULL) OR IF(methodName = 'UNLOCK',1,NULL) OR IF(methodName = 'MKCOL',1,NULL)) 'Metadata Write'
from imported.requests_table 
where 
-- (requestURL LIKE '%/dav/home%')
-- (requestURL LIKE '%/dav/Y3Review/%')
-- (requestURL LIKE '%/dav/workflows/%')
-- (requestURL LIKE '%/dav/STH/ReviewDemo/%')
-- (requestURL LIKE '%/dav/STH/STHAneuristImages/%')
-- (requestURL LIKE '%/dav/dare/%')
-- (requestURL LIKE '%/dav/VPHDare_Data/%')
--  (requestURL LIKE '%/dav/MySpine/%')
 (requestURL LIKE '%/dav/aneurist/%')


---------------------------------Plot folder profile time series-----------------------------
SELECT DATE_FORMAT(timeStamp, '%d/%m'), 
COUNT(IF(methodName = 'PUT',1,NULL) OR IF(methodName = 'POST',1,NULL) OR IF(methodName = 'DELETE',1,NULL))  'Data Write',
       COUNT(IF(methodName = 'GET',1,NULL)) 'Data Read',
       COUNT(IF(methodName = 'PROPFIND',1,NULL) OR IF(methodName = 'OPTIONS',1,NULL) OR IF(methodName = 'HEAD',1,NULL)) 'Metadata Read', 
       COUNT(IF(methodName = 'PROPPATCH',1,NULL) OR IF(methodName = 'COPY',1,NULL) OR IF(methodName = 'MOVE',1,NULL) OR IF(methodName = 'LOCK',1,NULL) OR IF(methodName = 'UNLOCK',1,NULL) OR IF(methodName = 'MKCOL',1,NULL)) 'Metadata Write'
from imported.requests_table 
where 
-- (requestURL LIKE '%/dav/home%')
-- (requestURL LIKE '%/dav/Y3Review/%')
-- (requestURL LIKE '%/dav/workflows/%')
-- (requestURL LIKE '%/dav/STH/ReviewDemo/%')
-- (requestURL LIKE '%/dav/STH/STHAneuristImages/%')
-- (requestURL LIKE '%/dav/dare/%')
-- (requestURL LIKE '%/dav/VPHDare_Data/%')
--  (requestURL LIKE '%/dav/MySpine/%')
 (requestURL LIKE '%/dav/aneurist/%')
GROUP BY YEAR(timeStamp), MONTH(timeStamp), DAY(timeStamp)
ORDER BY `timeStamp`


-------------------------------Average time between 1st upload and 1st download------------
INSERT INTO imported.upload_download_timeDiff (requestURL, firstUpload,firstDownload,timeDiff)


SELECT
    upload.requestURL, upload.min_ts as firstUpload,
    download.min_ts  as firstDownload,
    timestampdiff(SECOND, upload.min_ts, download.min_ts) as timeDiff
FROM
    (select
        requestURL, 
        MIN(timeStamp) AS min_ts, 
        methodName
    from
        imported.copy_requests_table
    where 
        methodName = 'GET'
    and  
(

        requestURL != '/' 
        and requestURL != ''
--         and requestURL NOT LIKE '%/skoulouz%'
--         and requestURL NOT LIKE '%/lobcderUsage%'
--         and requestURL NOT LIKE '%/test%'
--         and requestURL NOT LIKE '%/University_of_Sheffield_logo.png'
--         and requestURL NOT LIKE '%/file_%'
--         and requestURL NOT LIKE '%/tmp%'
--         and requestURL NOT LIKE '%/aneurist/aneuristServices.xml'
--         and requestURL NOT LIKE '%/aneurist/RingCut_outputSurfaceMesh.gmi'
--         and requestURL NOT LIKE '%_outputSurfaceMesh.%'
--         and requestURL NOT LIKE '%/aneurysm/AneuristVPHShareServiceSet.xml'
--         and requestURL NOT LIKE '%/biascorrection/inputs/atlasImage.mha'
--         and requestURL NOT LIKE '%/biascorrection/inputs/T2-PD.nii.gz'
--         and requestURL NOT LIKE '%/biascorrection/inputs/atlasMask.mha'
--         and requestURL NOT LIKE '%/CardiacMechanics/Case%'

)
    GROUP BY requestURL ) AS download
LEFT JOIN (
select
    requestURL, 
    MIN(timeStamp) AS min_ts, 
    methodName
from
    imported.copy_requests_table
where 
methodName = 'PUT' 
and  
(
       requestURL != '/' 
        and requestURL != '' 
--         and requestURL NOT LIKE '%/skoulouz%'
--         and requestURL NOT LIKE '%/lobcderUsage%'
--         and requestURL NOT LIKE '%/test%'
--         and requestURL NOT LIKE '%/University_of_Sheffield_logo.png'
--         and requestURL NOT LIKE '%/file_%'
--         and requestURL NOT LIKE '%/tmp%'
--         and requestURL NOT LIKE '%/aneurist/aneuristServices.xml'
--         and requestURL NOT LIKE '%/aneurist/RingCut_outputSurfaceMesh.gmi'
--         and requestURL NOT LIKE '%_outputSurfaceMesh.%'
--         and requestURL NOT LIKE '%/aneurysm/AneuristVPHShareServiceSet.xml'
--         and requestURL NOT LIKE '%/biascorrection/inputs/atlasImage.mha'
--         and requestURL NOT LIKE '%/biascorrection/inputs/T2-PD.nii.gz'
--         and requestURL NOT LIKE '%/biascorrection/inputs/atlasMask.mha'
--         and requestURL NOT LIKE '%/CardiacMechanics/Case%'

)
GROUP BY requestURL 
)AS upload 
ON 
download.requestURL = upload.requestURL 

where  upload.min_ts < download.min_ts




-------------------------remove hostname from urls----------------------------
CREATE TABLE imported.copy_requests_table  LIKE imported.requests_table; 
INSERT imported.copy_requests_table SELECT * FROM imported.requests_table ;


UPDATE  imported.copy_requests_table
SET imported.copy_requests_table.requestURL = SUBSTRING_INDEX(imported.copy_requests_table.requestURL, 'lobcder/dav', -1)
------------------------------------------



----------------------Get frequency --------------------------------------
SELECT ROUND(imported.upload_download_timeDiff.timeDiff ) AS bucket,
       COUNT(*)                    AS COUNT,
       RPAD('', LN(COUNT(*)), '*') AS bar
FROM   imported.upload_download_timeDiff
WHERE requestURL NOT LIKE '/test%'
GROUP  BY bucket;




-- drop table ref;
-- CREATE TEMPORARY TABLE ref (score INT);
-- 
-- drop PROCEDURE myFunction;
-- delimiter $$
-- 
-- CREATE PROCEDURE myFunction()
--  BEGIN
--         DECLARE i INT DEFAULT 1;
--         WHILE (i<=39426293) DO
--                INSERT INTO ref VALUES(i);
--                SET i=i+1;
--                SELECT @i;
--         END WHILE;
--  END$$
-- 
-- 
-- delimiter ;
-- call myFunction();

SELECT ref.score, COUNT(testscore.score) AS occurrences
FROM ref LEFT JOIN testscore ON ref.score = testscore.score
GROUP BY ref.score;     